" refs: spf13-vim

" vundle {
	set nocompatible
	filetype off

	" set the runtime path to include Vundle and initialize
	set rtp+=~/.config.nsc/vim/bundle/vundle
	call vundle#rc()
	" alternatively, pass a path where Vundle should install plugins
	" "let path = '~/some/path/here'
	" "call vundle#rc(path)

	" let Vundle manage Vundle, required
	Plugin 'gmarik/vundle'

	" The following are examples of different formats supported.
	" Keep Plugin commands between here and filetype plugin indent on.
	" scripts on GitHub repos
	Plugin 'tpope/vim-fugitive'
	"Plugin 'Lokaltog/vim-easymotion'
	"Plugin 'tpope/vim-rails.git'
	Plugin 'wesleyche/SrcExpl'
	Plugin 'bling/vim-airline'
	Plugin 'altercation/vim-colors-solarized'
	Plugin 'kien/ctrlp.vim'
	Plugin 'Valloric/YouCompleteMe'
	Plugin 'edkolev/tmuxline.vim'
	Plugin 'edkolev/promptline.vim'
	Plugin 'hewes/unite-gtags'
	Plugin 'Shougo/unite.vim'

	" The sparkup vim script is in a subdirectory of this repo called vim.
	" Pass the path to set the runtimepath properly.
	"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

	" scripts from http://vim-scripts.org/vim/scripts.html
	"Plugin 'L9'
	"Plugin 'FuzzyFinder'
	"Plugin 'cscope.vim'
	"Plugin 'surround.vim'
	Plugin 'Syntastic'
	Plugin 'gtags.vim'

	" scripts not on GitHub
	"Plugin 'git://git.wincent.com/command-t.git'

	" git repos on your local machine (i.e. when working on your own plugin)
	"Plugin 'file:///home/gmarik/path/to/plugin'
" }

" General {
	filetype plugin indent on " Automatically detect file types
	syntax on " Syntax highlighting

	set shortmess+=filmrxoOtT
	set virtualedit=onemore
	"set spell
	set hidden
	set nobackup
" }

" UI {
	set t_Co=256

	" using solarized color-scheme {
		let g:solarized_termcolors=256
		set background=dark " Assume a light background
		colorscheme solarized
		"let g:solarized_termtrans=1
		let g:solarized_contrast="high"
		let g:solarized_visibility="normal"
	" }

	"colorscheme Tomorrow-Night-Eighties

	set showmode " display the current mode
	set cursorline " highlight current line

	" if has('cmdline_info')
		"set ruler
		"set rulerformat=%30(%=\:b%n%y%m%r%w\ %1,%c%V\ %P%) " a ruler on steroids
		"set showcmd
		"endif

	set laststatus=2 " show status line
	set encoding=utf-8

	set backspace=indent,eol,start " backspace for dummies
	set linespace=0 " no extra spaces between rows
	set number " show line numbers
	set showmatch " show matching brackets/parenthesis
	set incsearch " find as you type search
	set hlsearch " highlight search terms
	set ignorecase " case insensitive search
	set smartcase " case sensitive when upper case present
	set wildmenu " show list instead of just completing
	"set wildmode=list:longest,full " command <Tab> completion, list matches, then longest common part, then all
	set whichwrap=b,s,h,l,<,>,[,] " backspace and cursor keys wrap to
	set scrolljump=5 " lines to scroll when cursor leaves screen
	set scrolloff=3 " minimum lines to keep above and below cursor
	set foldenable " auto fold code
	"set list
	"set listchars=tab:,.,trail:.,extends:#,nbsp:. " highlight problematic whitespace

	set winheight=10
	set winminheight=10

	set colorcolumn=80
" }

" Formatting {
	set tw=0
	set nowrap " wrap long lines
	set autoindent " indent at the same level of the previous line
	autocmd BufWritePre * :%s/\s\+$//e " Automatically removing all trailing whitespace
" }

" Key (re)Mappings {
	" Navigate and maximize the next window
	"map <C-W><LEFT>  <C-W><LEFT><C-W>_
	"map <C-W><RIGHT> <C-W><RIGHT><C-W>_
	"map <C-W><UP>    <C-W><UP><C-W>_
	"map <C-W><DOWN>  <C-W><DOWN><C-W>_

	" set mapleader
	let mapleader=","
" }

" Plugins {

	" vim-airline {
		let g:airline#extensions#tabline#enabled=0
		let g:airline_powerline_fonts=1
		let g:airline_theme='tomorrow'

		" tmuxline
		let g:airline#extensions#tmuxline#enabled=1
	" }

	" promptline {
		let g:promptline_theme = "airline"
		let g:promptline_preset = {
			\'a' : [promptline#slices#user()],
			\'c' : [promptline#slices#cwd()],
			\'b' : [promptline#slices#vcs_branch(), promptline#slices#jobs()],
			\'options' : {'left_sections' : ['a', 'b', 'c']}}
	" }

	" YouCompleteMe {
		let g:ycm_confirm_extra_conf = 0
		set completeopt-=preview
		"let g:ycm_min_num_of_chars_for_completion = 1
		let g:ycm_seed_identifiers_with_syntax = 1
		nnoremap <F9> :YcmCompleter GoToDefinitionElseDeclaration<CR>
		let g:ycm_autoclose_preview_window_after_completion=1
		"let g:ycm_semantic_triggers = {}
		"let g:ycm_semantic_triggers.c = ['->', '.', ' ', '(', '[', '&']
		"let g:ycm_register_as_syntastic_checker = 0
		"let g:ycm_show_diagnostics_ui = 1
	" }

	" Syntastic {
		"let g:syntastic_enable_balloons = 1
		"let g:syntastic_c_checkers = ['gcc']
	" }

	" CCTree {
		"let g:CCTreeOrientation = "rightbelow"
		"let g:CCTreeCscopeDB = ".cscope.out"
		"let g:CCTreeRecursiveDepth = 1
		"let g:CCTreeMinVisibleDepth = 1
	" }

	" SrcExpl {
		" Switch of the Source Explorer
		map <F8> :SrcExplToggle<CR>

		" Set the height of Source Explorer window
		""let g:SrcExpl_winHeight = 10

		" Refreshing the Source Explorer
		let g:SrcExpl_refreshTime = 1000

		"" Set "Enter" key to jump into the exact definition context
		let g:SrcExpl_jumpKey = "<ENTER>"

		" Set "Space" key for back from the definition context
		let g:SrcExpl_gobackKey = "<SPACE>"

		" In order to Avoid conflicts, the Source Explorer should know what plugins
		" are using buffers. And you need add their bufname into the list below
		" according to the command ":buffers!"
		let g:SrcExpl_pluginList = [
			\"Source_Explorer",
			\]

		" Enable/Disable the local definition searching, and note that this is not
		" guaranteed to work, the Source Explorer doesn't check the syntax for now.
		" It only searches for a match with the keyword according to command 'gd'
		let g:SrcExpl_searchLocalDef = 1

		" Do not let the Source Explorer update the tags file when opening
		let g:SrcExpl_isUpdateTags = 0

		" Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to
		" create/update a tags file
		"let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R -f .tags ."
	" }

	" GLOBAL (gtags) {
		set csprg=gtags-cscope
		cscope add GTAGS

		nnoremap <leader>gg :execute 'Unite gtags/def:'.expand('<cword>')<CR>
		nnoremap <leader>gc :execute 'Unite gtags/context'<CR>
		nnoremap <leader>gr :execute 'Unite gtags/ref'<CR>
		nnoremap <leader>ge :execute 'Unite gtags/grep'<CR>
		vnoremap <leader>gg <ESC>:execute 'Unite gtags/def:'.GetVisualSelection()<CR>

		function! GetVisualSelection()
			let [s:lnum1, s:col1] = getpos("'<")[1:2]
			let [s:lnum2, s:col2] = getpos("'>")[1:2]
			let s:lines = getline(s:lnum1, s:lnum2)
			let s:lines[-1] = s:lines[-1][: s:col2 - (&selection == 'inclusive' ? 1 : 2)]
			let s:lines[0] = s:lines[0][s:col1 - 1:]
			return join(s:lines, ' ')
		endfunction
	" }

	" TagList {
		"let Tlist_Show_One_File = 1
		"let Tlist_Exit_OnlyWindow = 1
		"" let Tlist_Auto_Open = 1
	" }

" }


